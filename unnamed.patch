Index: project/src/store/reducer.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/store/reducer.ts b/project/src/store/reducer.ts
--- a/project/src/store/reducer.ts	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/store/reducer.ts	(date 1649181423315)
@@ -1,15 +1,25 @@
-import { Reviews } from './../types/comment-types';
-import { UserData } from './../types/auth-data';
-import { ErrorType } from './../types/error';
-import { AuthorizationStatus } from './../const';
-import { Apartments, City } from './../types/offer-type';
-import { changeCity, loadApartments, requireAuthorization, setError, setUserData, setNearby, setReview, loadComment } from './action';
-import { createReducer } from '@reduxjs/toolkit';
-import { Cities } from '../mocks/city';
+import {Reviews} from './../types/comment-types';
+import {UserData} from './../types/user-data';
+import {ErrorType} from './../types/error';
+import {AuthorizationStatus} from './../const';
+import {Apartment, Apartments, City} from './../types/offer-type';
+import {
+  changeCity,
+  loadApartments,
+  requireAuthorization,
+  setError,
+  setUserData,
+  setNearby,
+  setReview,
+  setApartment
+} from './action';
+import {createReducer} from '@reduxjs/toolkit';
+import {Cities} from '../mocks/city';

 type initionalStateType = {
   apartments: Apartments;
   currentApartments: Apartments;
+  apartment: Apartment | null;
   city: City;
   price: number;
   authorizationStatus: AuthorizationStatus;
@@ -25,6 +35,7 @@
   city: Cities.Amsterdam,
   apartments: [],
   currentApartments: [],
+  apartment: null,
   price: 0,
   authorizationStatus: AuthorizationStatus.Unknown,
   error: '',
@@ -55,15 +66,15 @@
     .addCase(setUserData, (state, action) => {
       state.userData = action.payload;
     })
+    .addCase(setApartment, (state, action) => {
+      state.apartment = action.payload;
+    })
     .addCase(setNearby, (state, action) => {
       state.nearby = action.payload;
     })
     .addCase(setReview, (state, action) => {
       state.comments = action.payload;
     })
-    .addCase(loadComment, (state, action) => {
-      state.userComment = action.payload;
-    })
 });

-export { reducer };
+export {reducer};
Index: project/src/store/action.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/store/action.ts b/project/src/store/action.ts
--- a/project/src/store/action.ts	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/store/action.ts	(date 1649182393078)
@@ -1,15 +1,16 @@
-import { Reviews } from './../types/comment-types';
-import { UserData } from './../types/user-data';
-import { AuthorizationStatus, AppRoute } from './../const';
-import { createAction } from '@reduxjs/toolkit';
-import { Apartments } from '../types/offer-type';
+import {Reviews} from '../types/comment-types';
+import {UserData} from '../types/user-data';
+import {AuthorizationStatus, AppRoute} from '../const';
+import {createAction} from '@reduxjs/toolkit';
+import {Apartment, Apartments} from '../types/offer-type';
+import {ErrorType} from "../types/error";

 export const loadApartments = createAction<Apartments>('main/loadApartments');
 export const changeCity = createAction<string>('main/changeCity');
 export const requireAuthorization = createAction<AuthorizationStatus>('user/requireAuthorization');
-export const setError = createAction<string>('main/setError');
-export const setUserData = createAction<UserData>('login/setUserData');
+export const setError = createAction<ErrorType>('main/setError');
+export const setUserData = createAction<UserData | null>('login/setUserData');
 export const redirectToRoute = createAction<AppRoute>('main/redirectToRoute');
+export const setApartment = createAction<Apartment | null>('property/setApartment');
 export const setNearby = createAction<Apartments>('property/setNearby');
 export const setReview = createAction<Reviews[]>('property/setReview');
-export const loadComment = createAction<Reviews>('property/loadComment');
Index: project/src/components/property/property.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/components/property/property.tsx b/project/src/components/property/property.tsx
--- a/project/src/components/property/property.tsx	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/components/property/property.tsx	(date 1649181606206)
@@ -1,16 +1,23 @@
-import { Apartment, Apartments } from '../../types/offer-type';
+import {Apartment, Apartments} from '../../types/offer-type';
 import CommentForm from '../comment-form/comment-form';
 import NearPlacesList from '../near-places-list';
 import ReviewsList from '../reviews-list';
 import Map from '../map';
+import {useAppSelector} from "../../hooks";
+import {AuthorizationStatus} from "../../const";

 export type PropertyProps = {
   apartment: Apartment;
-  apartments: Apartments;
 }
-export default function Property({ apartment, apartments }: PropertyProps) {
-  const { previewImage, price, rating, title } = apartment;
+export default function Property({apartment}: PropertyProps) {
+  const {previewImage, price, rating, title} = apartment;

+  const authorizationStatus = useAppSelector((state) => state.authorizationStatus);
+
+  const isAuth = authorizationStatus === AuthorizationStatus.Auth;
+
+  const nearPlaces = useAppSelector((state) => state.nearby);
+
   return (
     <div className="page">
       <main className="page__main page__main--property">
@@ -18,22 +25,22 @@
           <div className="property__gallery-container container">
             <div className="property__gallery">
               <div className="property__image-wrapper">
-                <img className="property__image" src={previewImage} alt="Photo studio" />
+                <img className="property__image" src={previewImage} alt="Photo studio"/>
               </div>
               <div className="property__image-wrapper">
-                <img className="property__image" src="img/apartment-01.jpg" alt="Photo studio" />
+                <img className="property__image" src="img/apartment-01.jpg" alt="Photo studio"/>
               </div>
               <div className="property__image-wrapper">
-                <img className="property__image" src="img/apartment-02.jpg" alt="Photo studio" />
+                <img className="property__image" src="img/apartment-02.jpg" alt="Photo studio"/>
               </div>
               <div className="property__image-wrapper">
-                <img className="property__image" src="img/apartment-03.jpg" alt="Photo studio" />
+                <img className="property__image" src="img/apartment-03.jpg" alt="Photo studio"/>
               </div>
               <div className="property__image-wrapper">
-                <img className="property__image" src="img/studio-01.jpg" alt="Photo studio" />
+                <img className="property__image" src="img/studio-01.jpg" alt="Photo studio"/>
               </div>
               <div className="property__image-wrapper">
-                <img className="property__image" src="img/apartment-01.jpg" alt="Photo studio" />
+                <img className="property__image" src="img/apartment-01.jpg" alt="Photo studio"/>
               </div>
             </div>
           </div>
@@ -55,7 +62,7 @@
               </div>
               <div className="property__rating rating">
                 <div className="property__stars rating__stars">
-                  <span style={{ width: '80%' }}></span>
+                  <span style={{width: '80%'}}></span>
                   <span className="visually-hidden">{rating}</span>
                 </div>
                 <span className="property__rating-value rating__value">4.8</span>
@@ -114,7 +121,8 @@
                 <h2 className="property__host-title">Meet the host</h2>
                 <div className="property__host-user user">
                   <div className="property__avatar-wrapper property__avatar-wrapper--pro user__avatar-wrapper">
-                    <img className="property__avatar user__avatar" src="img/avatar-angelina.jpg" width="74" height="74" alt="Host avatar" />
+                    <img className="property__avatar user__avatar" src="img/avatar-angelina.jpg" width="74" height="74"
+                         alt="Host avatar"/>
                   </div>
                   <span className="property__user-name">
                     Angelina
@@ -137,20 +145,21 @@
               <section className="property__reviews reviews">
                 <h2 className="reviews__title">Reviews &middot; <span className="reviews__amount">1</span></h2>

-                <ReviewsList />
+                <ReviewsList/>

-                <CommentForm />
+
+                {isAuth && <CommentForm apartment={apartment}/>}
               </section>
             </div>
           </div>

-          <Map apartments={apartments} city={apartment.city} mapClassName='property__map' />
+          <Map apartments={nearPlaces} city={apartment.city} mapClassName='property__map'/>

         </section>
         <div className="container">
           <section className="near-places places">
             <h2 className="near-places__title">Other places in the neighbourhood</h2>
-            <NearPlacesList apartments={apartments} />
+            <NearPlacesList apartments={nearPlaces}/>
           </section>
         </div>
       </main>
Index: project/src/components/comment-form/comment-form.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/components/comment-form/comment-form.tsx b/project/src/components/comment-form/comment-form.tsx
--- a/project/src/components/comment-form/comment-form.tsx	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/components/comment-form/comment-form.tsx	(date 1649182217747)
@@ -1,74 +1,100 @@
-import { ChangeEvent, useState, UIEvent } from 'react';
-import { useAppSelector } from '../../hooks';
+import {ChangeEvent, useState, FormEvent} from 'react';
+import {useAppDispatch, useAppSelector} from '../../hooks';
+import {sendReview} from "../../store/api-action";
+import {Apartment} from "../../types/offer-type";
+import {Reviews} from "../../types/comment-types";

-export default function CommentForm() {
+export type CommentFormProps = {
+  apartment: Apartment;
+}

-  const currentComment = useAppSelector((state) => state.userComment);
+export default function CommentForm({apartment}: CommentFormProps) {
+  const dispatch = useAppDispatch();

-  const [comment, setComment] = useState({
-    userName: '',
-    date: '',
-    review: '',
+  const [comment, setComment] = useState<Pick<Reviews, "comment" | "rating">>({
+    rating: 0,
+    comment: '',
   });

-  const textareaHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {
-    const { name, value } = event.target;
-    setComment({ ...comment, [name]: currentComment?.comment });
-    // setComment({ ...comment, [name]: value });
+  const [isSending, setIsSending] = useState(false);
+
+  const formChangeHandler = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
+    let {name, value} = event.target;
+    setComment({...comment, [name]: name === 'rating' ? Number(value) : value});
   };

-  const commentSubmit = (event: UIEvent) => {
+  const commentSubmit = async (event: FormEvent<HTMLFormElement>) => {
     event.preventDefault();
+    if (comment.comment.length && comment.rating) {
+      setIsSending(true);
+      const actionResult = await dispatch(sendReview({apartmentId: apartment.id, review: comment}));
+      if (actionResult.meta.requestStatus === 'fulfilled') {
+        setComment({rating: 0, comment: ''});
+      }
+      setIsSending(false);
+    }
   };

   return (

-    <form className="reviews__form form" action="#" method="post">
+    <form className="reviews__form form" action="" method="post" onSubmit={commentSubmit}>
       <label className="reviews__label form__label" htmlFor="review">Your review</label>
       <div className="reviews__rating-form form__rating">
-        <input className="form__rating-input visually-hidden" name="rating" value="5" id="5-stars" type="radio" />
+        <input className="form__rating-input visually-hidden" name="rating" value="5" checked={comment.rating === 5}
+               onChange={formChangeHandler}
+               id="5-stars" type="radio"/>
         <label htmlFor="5-stars" className="reviews__rating-label form__rating-label" title="perfect">
           <svg className="form__star-image" width="37" height="33">
             <use xlinkHref="#icon-star"></use>
           </svg>
         </label>

-        <input className="form__rating-input visually-hidden" name="rating" value="4" id="4-stars" type="radio" />
+        <input className="form__rating-input visually-hidden" name="rating" value="4" checked={comment.rating === 4}
+               onChange={formChangeHandler}
+               id="4-stars" type="radio"/>
         <label htmlFor="4-stars" className="reviews__rating-label form__rating-label" title="good">
           <svg className="form__star-image" width="37" height="33">
             <use xlinkHref="#icon-star"></use>
           </svg>
         </label>

-        <input className="form__rating-input visually-hidden" name="rating" value="3" id="3-stars" type="radio" />
+        <input className="form__rating-input visually-hidden" name="rating" value="3" checked={comment.rating === 3}
+               onChange={formChangeHandler}
+               id="3-stars" type="radio"/>
         <label htmlFor="3-stars" className="reviews__rating-label form__rating-label" title="not bad">
           <svg className="form__star-image" width="37" height="33">
             <use xlinkHref="#icon-star"></use>
           </svg>
         </label>

-        <input className="form__rating-input visually-hidden" name="rating" value="2" id="2-stars" type="radio" />
+        <input className="form__rating-input visually-hidden" name="rating" value="2" checked={comment.rating === 2}
+               onChange={formChangeHandler}
+               id="2-stars" type="radio"/>
         <label htmlFor="2-stars" className="reviews__rating-label form__rating-label" title="badly">
           <svg className="form__star-image" width="37" height="33">
             <use xlinkHref="#icon-star"></use>
           </svg>
         </label>

-        <input className="form__rating-input visually-hidden" name="rating" value="1" id="1-star" type="radio" />
+        <input className="form__rating-input visually-hidden" name="rating" value="1" checked={comment.rating === 1}
+               onChange={formChangeHandler}
+               id="1-star" type="radio"/>
         <label htmlFor="1-star" className="reviews__rating-label form__rating-label" title="terribly">
           <svg className="form__star-image" width="37" height="33">
             <use xlinkHref="#icon-star"></use>
           </svg>
         </label>
       </div>
-      <textarea className="reviews__textarea form__textarea" id="review" name="review" placeholder="Tell how was your stay, what you like and what can be improved" onChange={textareaHandler} value={comment.review}></textarea>
+      <textarea className="reviews__textarea form__textarea" name="comment" disabled={isSending}
+                placeholder="Tell how was your stay, what you like and what can be improved"
+                onChange={formChangeHandler}
+                value={comment.comment}></textarea>
       <div className="reviews__button-wrapper">
         <p className="reviews__help">
           To submit review please make sure to set <span className="reviews__star">rating</span> and
           describe your stay with at least <b className="reviews__text-amount">50 characters</b>.
         </p>
-        <button className="reviews__submit form__submit button" type="submit" disabled={false} onClick={commentSubmit}>Submit
-        </button>
+        <button className="reviews__submit form__submit button" type="submit" disabled={isSending}>Submit</button>
       </div>
     </form>
   );
Index: project/src/services/error-handle.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/services/error-handle.ts b/project/src/services/error-handle.ts
--- a/project/src/services/error-handle.ts	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/services/error-handle.ts	(date 1649182492251)
@@ -1,10 +1,11 @@
-import { HTTP_CODE } from './../const';
-import { setError } from './../store/action';
-import { store } from './../store/index';
-import request from 'axios';
-import { ErrorType } from './../types/error';
-import { clearErrorAction } from '../store/api-action';
-export const errorHandle = (error: ErrorType): void => {
+import {HTTP_CODE} from './../const';
+import {setError} from './../store/action';
+import {store} from './../store/index';
+import request, {AxiosError} from 'axios';
+import {ErrorType} from './../types/error';
+import {clearErrorAction} from '../store/api-action';
+
+export const errorHandle = (error: unknown): void => {
   if (!request.isAxiosError(error)) {
     throw error;
   }
@@ -14,7 +15,7 @@
     store.dispatch(clearErrorAction());
   };

-  const { response } = error;
+  const {response} = error;

   if (response) {
     switch (response.status) {
Index: project/src/pages/property-page.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/pages/property-page.tsx b/project/src/pages/property-page.tsx
--- a/project/src/pages/property-page.tsx	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/pages/property-page.tsx	(date 1649182312002)
@@ -1,38 +1,51 @@
 import Property from '../components/property/property';
-import { useParams } from 'react-router-dom';
-import { Apartments } from '../types/offer-type';
-import { Reviews } from '../types/comment-types';
-import { useAppSelector } from '../hooks';
-import { useEffect } from 'react';
-import { store } from '../store';
-import { fetchNearby, fetchReviews, sendComment } from '../store/api-action';
+import {useParams} from 'react-router-dom';
+import {Apartments} from '../types/offer-type';
+import {Reviews} from '../types/comment-types';
+import {useAppSelector} from '../hooks';
+import {useEffect, useState} from 'react';
+import {store} from '../store';
+import {fetchApartment, fetchNearby, fetchReviews} from '../store/api-action';
 import NotFoundPage from './not-found-page';
+import {setApartment, setNearby, setReview} from "../store/action";
+import LoadingScreen from "../components/loading-screen";

 type PropertyPageProps = {
   reviews?: Reviews[] | null;
   apartments: Apartments;
 }

-export default function PropertyPage({ apartments }: PropertyPageProps) {
+export default function PropertyPage({apartments}: PropertyPageProps) {
   const params = useParams();
+  const [isLoading, setIsLoading] = useState(false);
   const id = Number(params.id);
-  const apartment = apartments.find((item) => item.id === id)!;
+
+  const apartment = useAppSelector((state) => state.apartment);

   useEffect(() => {
-    store.dispatch(fetchNearby(id));
-    store.dispatch(fetchReviews(id));
+    (async () => {
+      setIsLoading(true);
+
+      await Promise.all([
+        store.dispatch(fetchApartment(id)),
+        store.dispatch(fetchNearby(id)),
+        store.dispatch(fetchReviews(id)),
+      ]);
+      setIsLoading(false);
+    })();
+    return () => {
+      store.dispatch(setApartment(null))
+      store.dispatch(setNearby([]))
+      store.dispatch(setReview([]));
+    }
   }, [id]);


-  const nearPlaces = useAppSelector((state) => state.nearby);
-  const commentObject = useAppSelector((state) => state.comments);
-
-
-  if (id && id > apartments.length) {
-    return <NotFoundPage />;
+  if (isLoading) {
+    return <LoadingScreen/>;
+  } else if (apartment) {
+    return <Property apartment={apartment}/>
   } else {
-    return (
-      <Property apartment={apartment} reviews={commentObject} apartments={nearPlaces} />
-    );
+    return <NotFoundPage/>
   }
 }
Index: project/src/types/auth-data.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/types/auth-data.ts b/project/src/types/auth-data.ts
--- a/project/src/types/auth-data.ts	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/types/auth-data.ts	(date 1649181669491)
@@ -1,13 +1,4 @@
 export type AuthData = {
   login: string;
   password: string;
-};
-
-export type UserData = {
-  avatarUrl: string;
-  email: string;
-  id: number;
-  isPro: boolean;
-  name: string;
-  token: string;
 }
Index: project/src/types/user-data.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/types/user-data.ts b/project/src/types/user-data.ts
--- a/project/src/types/user-data.ts	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/types/user-data.ts	(date 1649181409570)
@@ -1,5 +1,5 @@
 export type UserData = {
-  id: number;
   email: string;
+  avatarUrl: string;
   token: string;
 };
Index: project/src/types/error.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/types/error.ts b/project/src/types/error.ts
--- a/project/src/types/error.ts	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/types/error.ts	(date 1649182431480)
@@ -1,1 +1,1 @@
-export type ErrorType = unknown;
+export type ErrorType = string;
Index: project/src/store/api-action.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/store/api-action.ts b/project/src/store/api-action.ts
--- a/project/src/store/api-action.ts	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/store/api-action.ts	(date 1649182073157)
@@ -1,13 +1,22 @@
-import { Reviews, UserReview } from './../types/comment-types';
-import { UserData } from './../types/user-data';
-import { AuthData } from './../types/auth-data';
-import { saveToken, dropToken } from './../services/token';
-import { loadApartments, requireAuthorization, setError, setUserData, redirectToRoute, setNearby, setReview, loadComment } from './action';
-import { APIRoute, AuthorizationStatus, TIMEOUT_SHOW_ERROR, AppRoute } from './../const';
-import { Apartments } from './../types/offer-type';
-import { createAsyncThunk } from '@reduxjs/toolkit';
-import { api, store } from './index';
-import { errorHandle } from '../services/error-handle';
+import {Reviews} from './../types/comment-types';
+import {UserData} from './../types/user-data';
+import {AuthData} from './../types/auth-data';
+import {saveToken, dropToken} from './../services/token';
+import {
+  loadApartments,
+  requireAuthorization,
+  setError,
+  setUserData,
+  redirectToRoute,
+  setNearby,
+  setReview,
+  setApartment
+} from './action';
+import {APIRoute, AuthorizationStatus, TIMEOUT_SHOW_ERROR, AppRoute} from './../const';
+import {Apartment, Apartments} from './../types/offer-type';
+import {createAsyncThunk} from '@reduxjs/toolkit';
+import {api, store} from './index';
+import {errorHandle} from '../services/error-handle';

 export const clearErrorAction = createAsyncThunk(
   'game/clearError',
@@ -23,7 +32,7 @@
   'data/fetchApartments',
   async () => {
     try {
-      const { data } = await api.get<Apartments>(APIRoute.Apartments);
+      const {data} = await api.get<Apartments>(APIRoute.Apartments);
       store.dispatch(loadApartments(data));
     } catch (error) {
       errorHandle(error);
@@ -34,11 +43,10 @@
   'user/checkAuth',
   async () => {
     try {
-      const { data } = await api.get<UserData>(APIRoute.Login);
+      const {data} = await api.get<UserData>(APIRoute.Login);
       store.dispatch(requireAuthorization(AuthorizationStatus.Auth));
       store.dispatch(setUserData(data));
-    } catch (error) {
-      errorHandle(error);
+    } catch {
       store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));
     }
   },
@@ -46,13 +54,13 @@

 export const loginAction = createAsyncThunk(
   'user/login',
-  async ({ login: email, password }: AuthData) => {
+  async ({login: email, password}: AuthData) => {
     try {
-      const { data } = await api.post<UserData>(APIRoute.Login, { email, password });
+      const {data} = await api.post<UserData>(APIRoute.Login, {email, password});
       saveToken(data.token);
       store.dispatch(requireAuthorization(AuthorizationStatus.Auth));
       store.dispatch(setUserData(data));
-      store.dispatch(redirectToRoute(AppRoute.Login));
+      store.dispatch(redirectToRoute(AppRoute.Main));
     } catch (error) {
       errorHandle(error);
       store.dispatch(requireAuthorization(AuthorizationStatus.NoAuth));
@@ -72,11 +80,24 @@
     }
   },
 );
+
+export const fetchApartment = createAsyncThunk(
+  'property/fetchApartment',
+  async (id: number) => {
+    try {
+      const {data} = await api.get<Apartment>(`${APIRoute.Apartments}/${id}`);
+      store.dispatch(setApartment(data));
+    } catch (error) {
+      errorHandle(error);
+    }
+  },
+);
+
 export const fetchNearby = createAsyncThunk(
-  'property/setNearby',
+  'property/fetchNearby',
   async (id: number) => {
     try {
-      const { data } = await api.get<Apartments>(`${APIRoute.Apartments}/${id}/nearby`);
+      const {data} = await api.get<Apartments>(`${APIRoute.Apartments}/${id}/nearby`);
       store.dispatch(setNearby(data));
     } catch (error) {
       errorHandle(error);
@@ -85,10 +106,10 @@
 );

 export const fetchReviews = createAsyncThunk(
-  'property/setReview',
+  'property/fetchReviews',
   async (id: number) => {
     try {
-      const { data } = await api.get<Reviews[]>(`${APIRoute.Comments}/${id}`);
+      const {data} = await api.get<Reviews[]>(`${APIRoute.Comments}/${id}`);
       store.dispatch(setReview(data));
     } catch (error) {
       errorHandle(error);
@@ -96,14 +117,15 @@
   },
 );

-export const sendComment = createAsyncThunk(
-  'property/loadComment',
-  async (id: number) => {
+export const sendReview = createAsyncThunk(
+  'property/sendReview',
+  async ({apartmentId, review}: { apartmentId: number, review: Pick<Reviews, "comment" | "rating"> }) => {
     try {
-      const { data } = await api.post<Reviews>(`${APIRoute.Comments}/${id}`);
-      store.dispatch(loadComment(data));
+      const {data} = await api.post<Reviews[]>(`${APIRoute.Comments}/${apartmentId}`, review);
+      store.dispatch(setReview(data));
     } catch (error) {
       errorHandle(error);
+      throw error;
     }
-  }
-)
+  },
+);
Index: project/src/components/reviews-list.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/components/reviews-list.tsx b/project/src/components/reviews-list.tsx
--- a/project/src/components/reviews-list.tsx	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/components/reviews-list.tsx	(date 1649181542422)
@@ -1,25 +1,13 @@
-import { useAppSelector } from '../hooks';
-import { Reviews } from '../types/comment-types';
+import {useAppSelector} from '../hooks';
+import {Reviews} from '../types/comment-types';
 import ReviewItem from './review-item';

-export type ReviewList = {
-  reviews: Reviews[];
-}
-
 export default function ReviewsList() {
-  const commentObject = useAppSelector((state) => state.comments);
+  const comments = useAppSelector((state) => state.comments);
   return (
     <ul className="reviews__list">
-      {commentObject.map((userReview) => (
-        <ReviewItem
-          key={userReview.id}
-          id={userReview.id}
-          name={userReview.user.name}
-          date={userReview.date}
-          comment={userReview.comment}
-          avatarUrl={userReview.user.avatarUrl}
-          rating={userReview.rating}
-        />
+      {comments.map((userReview) => (
+        <ReviewItem key={userReview.id} review={userReview}/>
       ))}
     </ul>
   );
Index: project/src/components/review-item.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/components/review-item.tsx b/project/src/components/review-item.tsx
--- a/project/src/components/review-item.tsx	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/components/review-item.tsx	(date 1649181502607)
@@ -1,13 +1,17 @@
-import { Reviews } from '../types/comment-types';
+import {Reviews} from '../types/comment-types';

-export default function ReviewItem(userReview: Reviews) {
-  const { date, comment, rating, avatarUrl, name } = userReview;
+export type  ReviewItemProps = {
+  review: Reviews;
+}
+
+export default function ReviewItem({review}: ReviewItemProps) {
+  const {date, comment, rating, user: {avatarUrl, name}} = review;

   return (
     <li className="reviews__item">
       <div className="reviews__user user">
         <div className="reviews__avatar-wrapper user__avatar-wrapper">
-          <img className="reviews__avatar user__avatar" src={avatarUrl} width="54" height="54" alt="Reviews avatar" />
+          <img className="reviews__avatar user__avatar" src={avatarUrl} width="54" height="54" alt="Reviews avatar"/>
         </div>
         <span className="reviews__user-name">
           {name}
@@ -16,7 +20,7 @@
       <div className="reviews__info">
         <div className="reviews__rating rating">
           <div className="reviews__stars rating__stars">
-            <span style={{ width: `${rating * 20}%` }}>{rating}</span>
+            <span style={{width: `${rating * 20}%`}}>{rating}</span>
             <span className="visually-hidden"></span>
           </div>
         </div>
Index: project/src/components/login/login.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/components/login/login.tsx b/project/src/components/login/login.tsx
--- a/project/src/components/login/login.tsx	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/components/login/login.tsx	(date 1649178757325)
@@ -13,7 +13,7 @@
   const dispatch = useAppDispatch();
   const authorizationStatus = useAppSelector((state) => state.authorizationStatus);

-  let isAuth = false;
+  const isAuth = authorizationStatus === AuthorizationStatus.Auth;

   const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
     event.preventDefault();
@@ -29,10 +29,6 @@
     dispatch(loginAction(authData));
   };

-  if (authorizationStatus === AuthorizationStatus.Auth) {
-    isAuth = true;
-  }
-
   return (
     <div className="page page--gray page--login">
       <header className="header">
@@ -64,7 +60,7 @@
             </form>
           </section>
           <section className="locations locations--login locations--current">
-            <div className="locations__item" style={isAuth === false ? { display: 'none' } : { display: 'block' }}>
+            <div className="locations__item" style={isAuth ? {display: 'block'} : {display: 'none'}}>
               <Link className="locations__item-link" to={AppRoute.Main}>
                 <span>Amsterdam</span>
               </Link>
Index: project/src/components/app/app.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project/src/components/app/app.tsx b/project/src/components/app/app.tsx
--- a/project/src/components/app/app.tsx	(revision c67c4ef9f54fd47c65a926ae4176146a8a72730e)
+++ b/project/src/components/app/app.tsx	(date 1649179906307)
@@ -1,18 +1,16 @@
-import React, { useEffect } from 'react';
-import { Route, Routes } from 'react-router-dom';
-import { AppRoute, AuthorizationStatus } from '../../const';
+import React from 'react';
+import {Route, Routes} from 'react-router-dom';
+import {AppRoute, AuthorizationStatus} from '../../const';
 import FavoritiesPage from '../../pages/favorities-page';
 import LoginPage from '../../pages/login-page';
 import NotFoundPage from '../../pages/not-found-page';
 import PropertyPage from '../../pages/property-page';
-import { Reviews } from '../../types/comment-types';
+import {Reviews} from '../../types/comment-types';
 import Layout from '../layout';
 import PrivateRoute from '../private-route/private-route';
-import { useAppSelector } from '../../hooks';
+import {useAppSelector} from '../../hooks';
 import Main from '../main/main';
 import LoadingScreen from '../loading-screen';
-import { checkAuthAction } from '../../store/api-action';
-import { store } from '../../store';
 import HistoryRouter from '../history-route/history-route';
 import browserHistory from '../../browser-history';

@@ -24,11 +22,6 @@
   authorizationStatus === AuthorizationStatus.Unknown;

 function App({ reviews }: AppProps): JSX.Element {
-  useEffect(() => {
-    store.dispatch(checkAuthAction());
-  }, []);
-
-
   const apartments = useAppSelector((state) => state.apartments);

   const { authorizationStatus, isDataLoaded } = useAppSelector((state) => state);
